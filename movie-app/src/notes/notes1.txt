<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .pic{
            width: 40px;
            height: 40px;
            object-fit: contain;
        }
    </style>
</head>
<body>
    <h1>Hello</h1>
    <script>
        const apiKey = '68bd4f569df65f9feb2dac611c38f06e';
        const totalPages = 5; // Change this to the number of pages you want to retrieve

        // Function to fetch data for a specific page
        function fetchData(pageNumber) {
            const apiUrl = `https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&page=${pageNumber}`;

            return fetch(apiUrl)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                });
        }

        // Fetch data for multiple pages
        const allData = [];

        for (let page = 1; page <= totalPages; page++) {
            fetchData(page)
                .then(data => {
                    // Add the results from this page to the allData array
                    allData.push(...data.results);

                    // If all pages have been fetched, you can work with allData
                    if (page === totalPages) {
                        // Create an ordered list (ol) element
                        const ol = document.createElement('ol');

                        // Loop through the data and create list items (li) for each movie
                        for (const movieData of allData) {
                            const li = document.createElement('li');
                            const img = document.createElement('img');
                            const img2 = document.createElement('img');
                            const text = document.createElement('p');
                            img.src = `https://image.tmdb.org/t/p/original${movieData.backdrop_path}`;
                            img.className = "pic"
                            img2.src = `https://image.tmdb.org/t/p/original${movieData.poster_path}`;
                            img2.className = "pic"
                            li.textContent = movieData.title;
                            // text.textContent = movieData.overview;
                            li.appendChild(text);
                            li.appendChild(img);
                            li.appendChild(img2);
                            ol.appendChild(li);
                        }

                        // Append the ol element to the document body or a specific container
                        document.body.appendChild(ol);
                    }
                    console.log(data)
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });

                // second

  const apiKey = '68bd4f569df65f9feb2dac611c38f06e';
const totalPages = 1; // Change this to the number of pages you want to retrieve

// Function to fetch TV series data for a specific page
function fetchSeriesData(pageNumber) {
  const apiUrl = `https://api.themoviedb.org/3/tv/popular?api_key=${apiKey}&page=${pageNumber}`;

  return fetch(apiUrl)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    });
}

// Fetch TV series data for multiple pages
const allSeries = [];

for (let page = 1; page <= totalPages; page++) {
  fetchSeriesData(page)
    .then(data => {
      // Add the results from this page to the allSeries array
      allSeries.push(...data.results);

      // If all pages have been fetched, you can work with allSeries
      if (page === totalPages) {
        // You can now process and display the TV series data as needed
        console.log('All TV Series Data:', allSeries);
      }
    })
    .catch(error => {
      console.error('There was a problem with the fetch operation:', error);
    });
}
        }



        // const apiKey = '68bd4f569df65f9feb2dac611c38f06e';
const seriesId = 12345; // Replace with the ID of the TV series you want to retrieve seasons for

// Function to fetch TV series data by ID
function fetchSeriesDataById(seriesId) {
  const apiUrl = `https://api.themoviedb.org/3/tv/${seriesId}?api_key=${apiKey}`;

  return fetch(apiUrl)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    });
}

// Function to fetch TV series seasons by ID
function fetchSeasonsDataById(seriesId) {
  const apiUrl = `https://api.themoviedb.org/3/tv/${seriesId}/season?api_key=${apiKey}`;

  return fetch(apiUrl)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    });
}

// Fetch TV series data by ID
fetchSeriesDataById(seriesId)
  .then(seriesData => {
    // You can access information about the TV series here
    console.log('TV Series Data:', seriesData);

    // Now, fetch information about the TV series seasons by ID
    fetchSeasonsDataById(seriesId)
      .then(seasonsData => {
        // You can access information about the TV series seasons here
        console.log('TV Series Seasons Data:', seasonsData);
      })
      .catch(error => {
        console.error('There was a problem with the fetch operation for seasons:', error);
      });
  })
  .catch(error => {
    console.error('There was a problem with the fetch operation for the TV series:', error);
  });



    </script>
</body>
</html>
