
// import { VStack, Text, useDisclosure, Icon, Drawer, DrawerOverlay, DrawerContent, DrawerCloseButton, DrawerHeader, DrawerBody, Image, Box, Divider } from '@chakra-ui/react';
// import { FiMenu } from 'react-icons/fi';
// import { playbtn } from '../../assets';

// const Sidebar = () => {
//   const { isOpen, onToggle, onClose } = useDisclosure();

//   return (
//     <>
//       {/* Sidebar for larger screens */}
//       <VStack
//         as="nav"
//         pos="fixed"
//         top="0"
//         left="0"
//         h="100vh"
//         w="250px"
//         bg="#040404"
//         color="white"
//         boxShadow="2xl"
//         overflowX="hidden"
//         overflowY="auto"
//         zIndex="9999"
//         transition="width 0.3s ease"
//         display={{ base: 'none', md: 'block' }}
//         fontFamily='Kanit, sans-serif'
//       >
//         <Box display='grid' gap='3' pt="6" px="4">
//           <Box display="flex" alignItems='center' gap='3' mb={4}>
//             <Image src={playbtn} boxSize={[6,7,8,9]} />
//             <Text className='slide-in-right' fontFamily='Kode Mono, monospace' fontWeight='700' fontSize={['lg', 'x-large', 'xx-large']}>
//               BeatBox
//             </Text>
//           </Box>
//           <Text fontSize="lg">Menu</Text>
//           <hr className='hr'/>
//           <Text fontSize="lg">Artist</Text>
//           <Text fontSize="lg">Albums</Text>
//           <Text fontSize="lg">Songs</Text>
//           <Text fontSize="lg">Settings</Text>
//         </Box>

//         <Box display='grid' gap='3' pt="6" px="4" mt={14}>
//           <Text fontSize="lg">Help</Text>
//           <hr className='hr'/>
//           <Text fontSize="lg">Artist</Text>
//           <Text fontSize="lg">Albums</Text>
//           <Text fontSize="lg">Songs</Text>
//           <Text fontSize="lg">Settings</Text>
//         </Box>
//       </VStack>

//       {/* Drawer for small screens */}
//       <Box display="flex" justifyContent='space-between' alignItems='center' py={[5]} px={[4,6,8,10]}>
//         <Box display={{ base: 'flex', md: 'none' }} alignItems='center' gap='3' >
//           <Image src={playbtn} boxSize={[10,12,14,16]} />
//           <Text className='slide-in-right' fontFamily='Kode Mono, monospace' fontWeight='700' fontSize={['lg', 'x-large', 'xx-large']}>
//             BeatBox
//           </Text>
//         </Box>
//         <Icon as={FiMenu} 
//           onClick={onToggle}
//           display={{ base: 'block', md: 'none' }}
//           aria-label="Toggle Sidebar"
//           boxSize={[7,8,9,10]}
//         />
//       </Box>

//       <Drawer placement="left" onClose={onClose} isOpen={isOpen}>
//         <DrawerOverlay />
//         <DrawerContent bg="#040404" color='white' zIndex={2}>
//           <DrawerBody>
//             <DrawerCloseButton pos={'absolute'} right={4} top={4} />
//             <Box display='grid' gap='3' pt="6" px="4">
//               <Box display="flex" alignItems='center' gap='3' mb={4}>
//                 <Image src={playbtn} boxSize={[6,7,8,9]} />
//                 <Text className='slide-in-right' fontFamily='Kode Mono, monospace' fontWeight='700' fontSize={['lg', 'x-large', 'xx-large']}>
//                   BeatBox
//                 </Text>
//               </Box>
//               <Text fontSize="lg">Menu</Text>
//               <hr className='hr'/>
//               <Text fontSize="lg">Dashboard</Text>
//               <Text fontSize="lg">Projects</Text>
//               <Text fontSize="lg">Teams</Text>
//               <Text fontSize="lg">Settings</Text>
//             </Box>
//           </DrawerBody>
//         </DrawerContent>
//       </Drawer>
//     </>
//   );
// };

// export default Sidebar;









import axios from 'axios';



export const fetchAccessToken = async (clientId: string, clientSecret: string, fetchTopTracks?: Function) => {
  try {
    const credentials = `${clientId}:${clientSecret}`;
    const encodedCredentials = btoa(credentials); 
    const response = await axios.post(
      'https://accounts.spotify.com/api/token',
      null,
      {
        params: {
          grant_type: 'client_credentials',
        },
        headers: {
          'Authorization': `Basic ${encodedCredentials}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      }
    );

    const accessToken = response.data.access_token;
    if (fetchTopTracks) {
      await fetchTopTracks(accessToken);
    }
    return accessToken;
  } catch (error) {
    console.error('Error fetching access token:', error);
    throw error; 
  }
};











interface Genre {
    id: string;
    name: string;
    imageUrl: string;
}

export const fetchGenres = async (): Promise<Genre[]> => {
    const clientId = import.meta.env.VITE_CLIENT_ID;
    const clientSecret = import.meta.env.VITE_CLIENT_SECRET;

    try {
        const accessToken = await fetchAccessToken(clientId, clientSecret);
        const response = await axios.get(
            'https://api.spotify.com/v1/browse/categories',
            {
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                },
            }
        );

        const genres: Genre[] = response.data.categories.items.map((item: any) => ({
            id: item.id,
            name: item.name,
            imageUrl: item.icons.length > 0 ? item.icons[0].url : '',
        }));
        console.log("", genres);
        return genres;
    } catch (error) {
        console.error('Error fetching genres:', error);
        return [];
    }
};







export const fetchSongsByGenre = async (genreId: string) => {
  try {
    const clientId = import.meta.env.VITE_CLIENT_ID;
    const clientSecret = import.meta.env.VITE_CLIENT_SECRET;
    const accessToken = await fetchAccessToken(clientId, clientSecret);

    const response = await axios.get(
      `https://api.spotify.com/v1/browse/categories/${genreId}/playlists`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
      }
    );

    if (!response.data || !response.data.playlists || !response.data.playlists.items) {
      console.error('Unexpected response format:', response.data);
      return [];
    }

    const playlists = response.data.playlists.items;

    // Fetch song images for each playlist and construct the songs array
    const songs = await Promise.all(playlists.map(async (playlist: any) => {
      // Fetch additional details for the playlist, including images
      const playlistDetailsResponse = await axios.get(
        `https://api.spotify.com/v1/playlists/${playlist.id}`,
        {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
          },
        }
      );

      // Extract relevant data from the playlist details response
      const playlistDetails = playlistDetailsResponse.data;

      // Assuming playlist images are available in the playlistDetails.images array
      const imageUrl = playlistDetails.images.length > 0 ? playlistDetails.images[0].url : null;

      return {
        id: playlist.id,
        name: playlist.name,
        imageUrl: imageUrl,
        // Add more properties as needed
      };
    }));

    console.log("Songs for genre ID", genreId, ":", songs);
    return songs;
  } catch (error) {
    console.error('Error fetching songs:', error);
    throw error;
  }
};





export const fetchSongsInPlaylist = async (playlistId: string) => {
  try {
    const clientId = import.meta.env.VITE_CLIENT_ID;
    const clientSecret = import.meta.env.VITE_CLIENT_SECRET;
    const accessToken = await fetchAccessToken(clientId, clientSecret);

    const response = await axios.get(
      `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
        },
      }
    );

    if (!response.data || !response.data.items) {
      console.error('Unexpected response format:', response.data);
      return [];
    }

    const tracks = response.data.items;
    console.log("tracks", tracks);

    const updatedTracks = tracks.map((track: any) => {
      const album = track.track.album; // Access the album object
      const imageUrl = album.images && album.images.length > 0 ? album.images[0].url : null; // Check if album has images
     console.log("alblum", album);
      return {
        id: track.track.id,
        name: track.track.name,
        imageUrl: imageUrl,
        // Add more properties as needed
      };
    });

    console.log("Songs in playlist", playlistId, ":", updatedTracks);
    return updatedTracks;
  } catch (error) {
    console.error('Error fetching songs in playlist:', error);
    throw error;
  }
};
